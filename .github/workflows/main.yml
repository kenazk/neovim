name: CodeSonar Neovim Build and Analyze

on:
  push:
    branches:
      - 'release/**'  # Feature Branches
  pull_request:
    branches:
      - 'release/**'
    paths:
      - '**.cmake'
      - '**/CMakeLists.txt'
      - '**/CMakePresets.json'
      - 'cmake.*/**'
      - '.github/**'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  BIN_DIR: ${{ github.workspace }}/bin
  INSTALL_PREFIX: ${{ github.workspace }}/nvim-install
  CAFILE: ".github/github.cert.pem" 
  TOKEN: "${{ secrets.GITHUB_TOKEN }}"
  API_URL: https://api.github.com
  CSONAR_HUB_URL: "https://partnerdemo.codesonar.com" 
  CSONAR_HUB_USER: "${{ secrets.CSONAR_HUB_USER }}"
  CSONAR_HUB_PASSWORD: "${{ secrets.CSONAR_HUB_PASSWORD }}"
  CSONAR_CSHOME: /opt/codesonar
  CS_USER_HOME: /__w/neovim/neovim
  COMMIT_HASH: ${{ github.sha }}
  REPO_URL: "https://github.com/kenazk/neovim"

jobs:
  CodeSonar_Analyze:
    permissions: write-all
    runs-on: codesecure-runner-set
    container:
      image: ghcr.io/codesecure-se/curl-cso-builder:8.1p0
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}

    steps:
      - name: Set parallelism
        run: echo "PARALLEL=`nproc`" >> $GITHUB_ENV

      - name: Checkout Neovim Source
        uses: actions/checkout@v4

      - name: Safe directory
        run: git config --global --add safe.directory `pwd`

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y ninja-build gettext libtool libtool-bin autoconf automake cmake g++ pkg-config unzip curl doxygen

      - name: Build Dependencies
        run: make deps

      - name: Configure Build
        run: |
          cmake -S cmake.deps --preset ci
          cmake --build .deps
          cmake --preset ci

      - name: Build Neovim
        run: |
          make -j $PARALLEL CMAKE_BUILD_TYPE=RelWithDebInfo
          sudo make install

      - name: Checkout CodeSonar CI-Script
        uses: actions/checkout@v4
        with:
          repository: CodeSecure-SE/codesonar_ci
          path: cso-scripts

      - name: Build and Analyze with CodeSonar
        run: python3 cso-scripts/build_and_analyze.py codesonar.conf make -j $PARALLEL

      - name: Upload SARIF to GitHub # Use this if you do not have GitHub Enterprise
        if: ${{ github.event.pull_request }}
        uses: actions/upload-artifact@v4
        with:
          name: SARIF file
          path: warnings.sarif

      - name: Push Summary Report
        if: ${{ github.event.pull_request }}
        uses: thollander/actions-comment-pull-request@v2
        with:
          filePath: warnings.md

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: warnings.sarif
          category: "CodeSecure CodeSonar"

  old-cmake:
    name: Test oldest supported cmake
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      CMAKE_URL: 'https://cmake.org/files/v3.16/cmake-3.16.0-Linux-x86_64.sh'
      CMAKE_VERSION: '3.16.0'
    steps:
      - uses: actions/checkout@v4
      - name: Install minimum required version of cmake
        run: |
          curl --retry 5 --silent --show-error --fail -o /tmp/cmake-installer.sh "$CMAKE_URL"
          mkdir -p "$BIN_DIR" /opt/cmake-custom
          chmod a+x /tmp/cmake-installer.sh
          /tmp/cmake-installer.sh --prefix=/opt/cmake-custom --skip-license
          ln -sfn /opt/cmake-custom/bin/cmake "$BIN_DIR/cmake"
          cmake_version="$(cmake --version | head -1)"
          echo "$cmake_version" | grep -qF "cmake version $CMAKE_VERSION" || {
            echo "Unexpected CMake version: $cmake_version"
            exit 1
          }

      - name: Build dependencies
        run: make deps

      - name: Build Neovim
        run: make CMAKE_FLAGS="-D CI_BUILD=ON -D CMAKE_INSTALL_PREFIX:PATH=$INSTALL_PREFIX"

      - name: Install
        run: make install
